1) Big O of goodbye_world.rb is O(1) or constant time. It will always take the
   same amount of time of execute

2) Big O of find_largest.rb is 0(n) or linear time. It will loop through the
   whole collection hitting each index every time so as n grows, Big O will grow
   linearly.

3) Big O of find_largest_2D_array.rb is O(n) since it has to loop through an
   array and hit each element once.

4) Big O of numbers_recurive.rb is O(2^n) because if n in increased by one the
  amount of operations it needs to run grows exponential.

5) Big O of numbers_iterative.rb is O(n) because if n in increased by one the
   amount of operations it needs to run grows linearly.

6) Big O of sort.rb which is a quicksort algorithm is O(n^2) because if the pivot
   is the largest or smallest element in the collection it will have to run n^2 times
